"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaStack = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const path = require("path");
class LambdaStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const { moviesBucket, moviesDataTable, subscriptionsDataTable, movieRatingsTable } = props;
        this.uploadMovieFn = new lambda.Function(this, "uploadMovieFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/upload-movie")),
            environment: {
                S3_BUCKET: moviesBucket.bucketName,
                DYNAMODB_TABLE: moviesDataTable.tableName,
            },
        });
        this.downloadMovieFn = new lambda.Function(this, "downloadMovieFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/download-movie")),
            environment: {
                S3_BUCKET: moviesBucket.bucketName,
                DYNAMODB_TABLE: moviesDataTable.tableName,
            },
        });
        this.getSingleMovieFn = new lambda.Function(this, "getSingleMovieFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/get-single-movie")),
            environment: {
                S3_BUCKET: moviesBucket.bucketName,
                DYNAMODB_TABLE: moviesDataTable.tableName,
                RATINGS_TABLE: movieRatingsTable.tableName
            },
        });
        this.getMoviesFn = new lambda.Function(this, "getMoviesFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/get-movies")),
            environment: {
                S3_BUCKET: moviesBucket.bucketName,
                DYNAMODB_TABLE: moviesDataTable.tableName,
            },
        });
        this.deleteMovieFn = new lambda.Function(this, "deleteMovieFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/delete-movie")),
            environment: {
                S3_BUCKET: moviesBucket.bucketName,
                DYNAMODB_TABLE: moviesDataTable.tableName,
            },
            timeout: cdk.Duration.seconds(10),
        });
        this.subscribeFn = new lambda.Function(this, "subscribeFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/subscribe")),
            environment: {
                DYNAMODB_TABLE: subscriptionsDataTable.tableName,
            },
        });
        this.getSubscriptionsFn = new lambda.Function(this, "getSubscriptionsFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/get-subscriptions")),
            environment: {
                DYNAMODB_TABLE: subscriptionsDataTable.tableName,
            },
        });
        this.unsubscribeFn = new lambda.Function(this, "unsubscribeFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/unsubscribe")),
            environment: {
                DYNAMODB_TABLE: subscriptionsDataTable.tableName,
            },
        });
        this.editMovieFn = new lambda.Function(this, "editMovieFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/edit-movie")),
            environment: {
                S3_BUCKET: moviesBucket.bucketName,
                DYNAMODB_TABLE: moviesDataTable.tableName,
            },
        });
        this.rateMovieFn = new lambda.Function(this, "rateMovieFn", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            code: lambda.Code.fromAsset(path.join(__dirname, "./src/rate-movie")),
            environment: {
                MOVIE_RATINGS_TABLE: movieRatingsTable.tableName,
            },
        });
        moviesBucket.grantRead(this.downloadMovieFn);
        moviesBucket.grantRead(this.getMoviesFn);
        moviesBucket.grantRead(this.getSingleMovieFn);
        moviesBucket.grantReadWrite(this.uploadMovieFn);
        moviesBucket.grantReadWrite(this.deleteMovieFn);
        moviesBucket.grantReadWrite(this.editMovieFn);
        moviesDataTable.grantReadData(this.downloadMovieFn);
        moviesDataTable.grantReadData(this.getSingleMovieFn);
        moviesDataTable.grantReadData(this.getMoviesFn);
        moviesDataTable.grantReadWriteData(this.uploadMovieFn);
        moviesDataTable.grantReadWriteData(this.deleteMovieFn);
        moviesDataTable.grantReadWriteData(this.editMovieFn);
        subscriptionsDataTable.grantWriteData(this.subscribeFn);
        subscriptionsDataTable.grantReadData(this.getSubscriptionsFn);
        subscriptionsDataTable.grantWriteData(this.unsubscribeFn);
        movieRatingsTable.grantReadWriteData(this.rateMovieFn);
        movieRatingsTable.grantReadData(this.getSingleMovieFn);
    }
}
exports.LambdaStack = LambdaStack;
//# sourceMappingURL=data:application/json;base64,